package exercise.oop.abstractEx;

public class Main {
	public static void main(String[] args) {
		저글링 obj1 = new 저글링();
		마린 obj2 = new 마린();
		질럿 obj3 = new 질럿();
		레이스 obj4 = new 레이스();
		뮤탈리스크 obj5 = new 뮤탈리스크();
		커세어 obj6 = new 커세어();
		
		// 공중유닛 이란게 인터페이스지만 자료형으로는 유효해서 배열로가능
		공중유닛[] 공중 = new 공중유닛[] { //공중유닛 타입으로 배열을만들고 공중타입으로 묶어줄수잇다.
				obj4, obj5, obj6 //전혀다른타입인데 관계를만들어줌
		};
		
		for(int i = 0; i < 공중.length; i++) {
			공중[i].공중동작();
		}
		
	}
}

// A는 A지만 아무런 정의도 갖고 있지 않으면? 다른 D 데서 재정의가 가능하다면?
// 이미 상속받았는데 다른 특징과 동시에 필요한 타입이 만들어져야한다면 interface라는걸이용!!!

// interface : 관계가 없는 애들을 묶어주기위한, 관계를 만들어주는 접점 역할
// ex)고양이는 동물이다. ,개는 동물이다. => 상속이된다.
// 만약 펭귄이란게있는게 있는데 개는동물은상속이되지만 얘는 물에서살아서 고양이 개처럼 물에서 사는 걸 상속을못한다고생각...

// but 자바는 1자상속 단일상속만된다... 그래서 interface를 이용해 관계없는애들을 묵어준다.


// ex) 예를들어 프로토스유닛중에 질럿 드라군 하이템플러 캐리어가있는데 한번에 선택할 수있는데 그러면 공격 홀드 이동는 것 밖에안보인다. 각자가가지고있는스킬이안나온다 => "업캐스팅"
// 그 중에 하이템플러만 지정해서 마법(사이오닉스톰)을 스고싶다면 하이템플러만 지정하는데 이러면 하이템플러의 기술이보이니 = > "다운캐스팅"

// 아마 유닛이라는 최상위클래스가 있고 프로토스유닛이라면 쉴드가붙고 저그유닛이라면 재생이붙고 테란이라면 수리기능있고.. 그런걸것이다...


