UML
## 웹 프로젝트 진행 순서
- 1단계. 착수 (제안요청서(RFP))
- 2단계. 요구사항 정의
- 3단계. 요구사항 분석
- 4단계. 설계
- 5단계. 구현
- 6단계. 테스트
- 7단계. 이관
- 8단계. 운영지원

## 제안요청서(RFP)
- Request For Proposal
- 발주자(갑)과 특정 과제의 수행에 필요한 요구사항을 체계적으로 정리하여 제시함으로써 제안자(을)가 제안서를 작성하는데 도움을 주기 위한 문서

## 요구사항
- 문제의 해결 또는 목적 달성을 위하여 고객에 의해 요구되거나,표준이나 명세 등을 만족하기 위하여 시스템이 가져야 하는 서비스 또는 제약사항
- 고객이 요구한 사항과 요구하지 않았더라도 당연히 제공되어야 한다고 가정되는 사항들.

## 요구사항의 중요성
- 참여자들로 하여금 개발되는 소프트웨어 제품을 전체적으로 파악하도록 하여 의사소통시간을 절약하게 해주는 것.
- 상세한 요구사항이 있어야만 산정이 가능하고, 이를 기반으로 계획을 세울 수 있기 때문에 중요함.

## 요구사항의 분류
1.기능적 요구사항(Functional Requirements)
 - 목표로 하는 애플리케이션의 구현을 위해 소프트웨어가 가져야하는 기능적인 속성
 - ex) 워드프로세서라면 작성한 글 저장 기능,편집 기능, 보기 기능 등이 있어야 함

2.비기능적 요구사항
 - 애플리케이션의 품질 기준 등을 만족시키기 위해 소프트웨어가 가져야 하는 성능, 사용의 용이성, 신뢰도 보안성
유지보수성 등과 같은 행위적 특성으로 시스템의 기능에 관련되지 않은 요구사항
 - ex) 성능(응답시간, 처리량) 보안 등
 - 품질 속성이라고도 함.

## 요구사항 정의서
- 서비스를 구현하기 위해 필요한 요구사항을 정리하기 위하여 작성한 것
- 요구사항 명세서라고 하며 요구사항을 분석하여 명확하고 완전하게 기록하는 것
- 소프트웨어 시스템이 수행해야 할 모든 기능과 구현상의 제약조건에 대해 개발자와 관련자가 합의한 스펙에 대한

### 요구사항 정의서 작성이유
- 프로젝트 전체 규모를 파악
- 구현 가능 여부에 대한 논의
- 커뮤니케이션 비용 절약
- 프로젝트 일정 계획 수립

## UML(Unified Model Languange)
- 통합 모델링언어
- 소프트웨어 공학에서 사용되는 표준화된 범용 모델링 언어로 소프트웨어 개념을 다이어그램으로 그리기 위해 사용하는 시각적인 표기법
- 프로그램 설계를 표현하기 위해 사용하는 그림으로 된 표기법
- 소프트웨어 시스템, 업무 모델링, 시스템의 산출물을 규정하고 시각화하며 문서화 하는 언어

## UML의 필요 이유
- 시스템의 복잡성을 표준적인 표기법으로 모델링하여 단순하게 표현 가능
- 팀 간의 의사소통에 필요
- 대규모 프로젝트 구조의 로드맵을 만들때 유용
- 개발할 시스템 구축에 대한 기초 마련
- 백엔드 문서용으로 사용하기좋다

## UML의 종류
1. 유스케이스 다이어그램
   - 시스템이 제공하는 기능과 이용자와의 관계를 표현함
2. 클래스 다이어그램
   - 클래스 명세(필드,메소드)와 클래스 간의 관계를 표현함
3. 시퀀스 다이어그램
   - 일련의 처리에 있어 제어의 흐름을 표현

4. 액티비티 다이어그램
5. 콜라보레이션 다이어그램
6. 상태 다이어그램
7. 컴포넌트 다이어그램
8. 배포 다이어그램


## 유스케이스(유즈케이스)
- 시스템의 기능적인 요구사항을 설명하기 위한 도구
- Actor와 시스템이 수행하는 활동간의 관계를 표시함

## 유즈케이스의 요소
- 시스템
 - 우리가 개발하고자 하는 시스템을 사각형으로 표시

- 유스케이스
 - 시스템이 어떤 서비스 또는 기능을 제공하는지 명세해주는 것으로 타원형으로 표시
 - 유스케이스의 이름은 단순명로하게 기술 ex)예금기능, 조회기능, 가입기능

- 액터
 - 액터는 시스템 외부에 존재하며 시스템과 상호작용하는 모든 것
 - 이벤트를 완결하기 위해 시스템과 상호작용하는 개체
 - 액터가 사람일 경우, 시스템과 상호작용하는 사용자에 의해 수행되는 역할(Role)을 나타냄

## 액터의 종류
1. 프라이머리 액터(Primary Actor)
- 시스템을 사용함으로써 이득을 얻는 액터
- 보통 사람을 지칭하고 사람모양으로 표기
- 보통 시스템 왼쪽에 표기

2. 세컨더리 엑터(Secondary Actor)
- 프라이머리 엑터가 이득을 얻기 위해 도움을 주는 엑터
- 보통 외부 시스템을 의미 <<actor>> 로 표기
- 시스템 오른쪽에 표기
-> 액터 이름을 특정인으로 지정 불가

## 관계

## 관계의 종류
1. 연관관계
  - 유스케이스와 엑터 간 상호작용을 의미하는 관계
  - 실선 화살표

2. 포함관계
 - 한 유스케이스가 다른 유스케이스의 기능을 포함하는 관계(반드시 해야만 하는 관계)
 - 점선 화살표

3. 확장관계
 - 기본 유스케이스에 특정 조건이나 엑터의 선택에 따라 발생하는 유스케이스(선택적으로 할 수 잇는 관계)
 - 포함관계와 방향이 다른 점선 화살표

4.일반화관계
 - 유사한 유스케이스들 또는 액터들을 추상화한 하나의 유스케이스로 그룹핑하여 이해도를 높인 관계계


## 클래스 다이어그램
-- UML의 한 종류
- 시스템을 구성하는 클래스들 간의 관계를 보여줌
- 시간에 따라 변하지 않는 시스템의 정적인 면을 보여줌

## 클래스 다이어그램 그리는 법
1. 직사각형을 그린다.
2. 맨 위층에 클래스명을 적는다.
3. 그 다음 아래층에 필드를 적는다.
4. 그 다음 아래층에 메소드를 적는다.

### 클래스 다이어그램 표기시 사용되는 요소
1. 접근제어자
 - public : (+), 어떤 클래스의 객체에서도 접근 가능
 - private : (-), 클래스 내에서 생성된 객체들만 접근 가능
 - protected : (#), 클래스와 동일 패키지 또는 상속관계에 있는 하위 클래스의 객체들만 접근 가능
 - package : (~), 동일 패키지에 있는 클래스의 객체들만이 접근 가능

2. 예약어
 - static : 밑줄, static 영역에 할당
 - final : 대문자, 상수로 표시
 - abstract : 기울임,추상클래스나 추상메소드를 표현함.

## 클래스 다이어그램 관계
1. 연관관계(association) : 실선화살표
 - 클래스 A와 클래스 B는 연결되어 있다.
2. 일반화관계(generalization) : 빈 삼각형 실선
 - 클래스 B는 클래스 A의 하위 클래스이다.
3. 실체화관계(realization) : 빈 삼각형 점선
 - 클래스 B는 인터페이스 A를 실현한다.
4. 의존관계(dependency) : 점선화살표
 - 클래스 A는 클래스 B에 의존한다.
5. 집합관계(aggregation) : 빈 다이아몬드 실선
 - 클래스 B는 클래스 A의 부분이다.
6. 합성관계(composition) : 검은 다이아몬드 실선
- 클래스 A는 클래스 B를 한개 이상 포함하고 잇다.(부분이다.)

























































































